// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DecentralizedAutonomousOrganization {
    address public owner;
    uint256 public totalShares;
    uint256 public totalBondedShares;
    uint256 public proposalCount;
    uint256 public constant QUORUM_VOTES = 51; // 51% quorum needed to pass a proposal
    uint256 public constant MINIMUM_BOND = 10; // Minimum shares required to participate in DAO governance
    uint256 public constant MAX_PROPOSAL_DURATION = 30 days; // Maximum duration for proposal voting
    uint256 public constant REWARD_SHARES = 1000; // Total shares allocated for rewards distribution

    mapping(address => uint256) public shares;
    mapping(address => uint256) public bondedShares;
    mapping(uint256 => Proposal) public proposals;

    enum ProposalStatus { Pending, Active, Passed, Failed, Executed }

    struct Proposal {
        address proposer;
        string description;
        uint256 votingDeadline;
        uint256 yesVotes;
        uint256 noVotes;
        ProposalStatus status;
        mapping(address => bool) voted;
    }

    event ProposalCreated(uint256 indexed proposalId, address indexed proposer, string description);
    event Voted(uint256 indexed proposalId, address indexed voter, bool vote);
    event ProposalExecuted(uint256 indexed proposalId);
    event SharesBonded(address indexed account, uint256 shares);
    event SharesUnbonded(address indexed account, uint256 shares);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    modifier onlyBonded() {
        require(bondedShares[msg.sender] >= MINIMUM_BOND, "Not enough bonded shares");
        _;
    }

    constructor() {
        owner = msg.sender;
        totalShares = REWARD_SHARES;
        shares[owner] = totalShares;
        totalBondedShares = totalShares;
        emit SharesBonded(owner, totalShares);
    }

    function createProposal(string memory _description) external onlyBonded {
        require(proposalCount == 0 || block.timestamp >= proposals[proposalCount].votingDeadline, "Previous proposal still active");
        proposalCount++;
        uint256 proposalId = proposalCount;
        uint256 votingDeadline = block.timestamp + MAX_PROPOSAL_DURATION;
        proposals[proposalId] = Proposal({
            proposer: msg.sender,
            description: _description,
            votingDeadline: votingDeadline,
            yesVotes: 0,
            noVotes: 0,
            status: ProposalStatus.Active
        });
        emit ProposalCreated(proposalId, msg.sender, _description);
    }

    function vote(uint256 _proposalId, bool _vote) external onlyBonded {
        Proposal storage proposal = proposals[_proposalId];
        require(proposal.status == ProposalStatus.Active, "Proposal not active");
        require(block.timestamp < proposal.votingDeadline, "Voting deadline passed");
        require(!proposal.voted[msg.sender], "Already voted");

        if (_vote) {
            proposal.yesVotes += bondedShares[msg.sender];
        } else {
            proposal.noVotes += bondedShares[msg.sender];
        }
        proposal.voted[msg.sender] = true;
        emit Voted(_proposalId, msg.sender, _vote);
        _checkProposalStatus(_proposalId);
    }

    function executeProposal(uint256 _proposalId) external onlyOwner {
        Proposal storage proposal = proposals[_proposalId];
        require(proposal.status == ProposalStatus.Passed, "Proposal not passed");
        require(block.timestamp < proposal.votingDeadline, "Voting deadline passed");
        proposal.status = ProposalStatus.Executed;
        emit ProposalExecuted(_proposalId);
        // Execute proposal logic here
    }

    function bondShares(uint256 _shares) external {
        require(shares[msg.sender] >= _shares, "Not enough shares");
        shares[msg.sender] -= _shares;
        bondedShares[msg.sender] += _shares;
        totalBondedShares += _shares;
        emit SharesBonded(msg.sender, _shares);
    }

    function unbondShares(uint256 _shares) external {
        require(bondedShares[msg.sender] >= _shares, "Not enough bonded shares");
        bondedShares[msg.sender] -= _shares;
        shares[msg.sender] += _shares;
        totalBondedShares -= _shares;
        emit SharesUnbonded(msg.sender, _shares);
    }

    function _checkProposalStatus(uint256 _proposalId) internal {
        Proposal storage proposal = proposals[_proposalId];
        uint256 totalVotes = proposal.yesVotes + proposal.noVotes;
        uint256 quorum = (totalBondedShares * QUORUM_VOTES) / 100;
        if (totalVotes >= quorum) {
            if ((proposal.yesVotes * 100) / totalVotes >= QUORUM_VOTES) {
                proposal.status = ProposalStatus.Passed;
            } else {
                proposal.status = ProposalStatus.Failed;
            }
        }
    }
}
